import pandas as pd
import numpy as np
from itertools import product

#Read input data from Excel
def read_excel(file_path):
    """
    Reads the transportation problem data from an Excel file.
    Returns the costs matrix, supply vector, and demand vector.
    """
    df = pd.read_excel(file_path, header=None)
    costs = df.iloc[:3, :3].values  
    supply = df.iloc[:3, 3].values  
    demand = df.iloc[3, :3].values  
    return costs, supply, demand


# Northwest Corner Rule Method
def northwest_corner(costs, supply, demand):
    """
    Solves the transportation problem using the Northwest Corner method.
    Returns the initial allocation matrix.
    """
    rows, cols = costs.shape
    allocation = np.zeros((rows, cols))
    i, j = 0, 0

    while i < rows and j < cols:
        allocated_amount = min(supply[i], demand[j])
        allocation[i, j] = allocated_amount
        supply[i] -= allocated_amount
        demand[j] -= allocated_amount
        if supply[i] == 0:
            i += 1
        elif demand[j] == 0:
            j += 1
    return allocation


#Minimum Cost Method
def minimum_cost_method(costs, supply, demand):
    """
    Solves the transportation problem using the Minimum Cost method.
    Returns the initial allocation matrix.
    """
    rows, cols = costs.shape
    allocation = np.zeros((rows, cols))

    sorted_cells = sorted(product(range(rows), range(cols)), key=lambda x: costs[x])
    for i, j in sorted_cells:
        if supply[i] == 0 or demand[j] == 0:
            continue
        allocated_amount = min(supply[i], demand[j])
        allocation[i, j] = allocated_amount
        supply[i] -= allocated_amount
        demand[j] -= allocated_amount
    return allocation


# Vogel's Approximation Method
def vogels_method(costs, supply, demand):
    """
    Solves the transportation problem using Vogel's Approximation method.
    Returns the initial allocation matrix.
    """
    rows, cols = costs.shape
    allocation = np.zeros((rows, cols))

    remaining_supply = supply.copy()
    remaining_demand = demand.copy()

    supply_indices = list(range(rows))
    demand_indices = list(range(cols))

    while supply_indices and demand_indices:
        penalties = []

        # Calculate row penalties
        for i in supply_indices:
            row_costs = [costs[i][j] for j in demand_indices]
            if len(row_costs) >= 2:
                sorted_row_costs = sorted(row_costs)
                penalties.append((sorted_row_costs[1] - sorted_row_costs[0], i, 'row'))
            elif len(row_costs) == 1:
                penalties.append((row_costs[0], i, 'row'))

        # Calculate column penalties
        for j in demand_indices:
            col_costs = [costs[i][j] for i in supply_indices]
            if len(col_costs) >= 2:
                sorted_col_costs = sorted(col_costs)
                penalties.append((sorted_col_costs[1] - sorted_col_costs[0], j, 'col'))
            elif len(col_costs) == 1:
                penalties.append((col_costs[0], j, 'col'))

        if not penalties:
            break

        penalty_value, index, type_of_penalty = max(penalties, key=lambda x: x[0])

        # Determine the position for allocation based on penalty
        if type_of_penalty == 'row':
            i = index
            j = demand_indices[np.argmin([costs[i][j] for j in demand_indices])]
        else:
            j = index
            i = supply_indices[np.argmin([costs[i][j] for i in supply_indices])]

        allocated_amount = min(remaining_supply[i], remaining_demand[j])
        allocation[i, j] = allocated_amount
        remaining_supply[i] -= allocated_amount
        remaining_demand[j] -= allocated_amount

        # Remove exhausted supply or demand
        if remaining_supply[i] < 1e-10:
            supply_indices.remove(i)
        if remaining_demand[j] < 1e-10:
            demand_indices.remove(j)

    return allocation


# --- Total Cost Calculation ---
def calculate_total_cost(allocation, costs):
    """
    Calculates the total transportation cost based on the allocation matrix and cost matrix.
    """
    return np.sum(allocation * costs)


# --- Transportation Simplex Algorithm ---
def transportation_simplex(costs, allocation):
    """
    Solves the transportation problem using the Simplex algorithm.
    Returns the optimal allocation matrix.
    """
    rows, cols = costs.shape
    max_iterations = 100
    iteration = 0

    while iteration < max_iterations:
        basic_vars = find_basic_variables(allocation)

        u, v = compute_dual_variables(costs, basic_vars)

        reduced_costs = compute_reduced_costs(costs, u, v)

        entering = find_entering_variable(reduced_costs, basic_vars)

        if entering is None:
            break

        cycle = find_cycle(entering, basic_vars, rows, cols)

        if not cycle:
            break

        allocation = update_allocation(allocation, cycle)

        iteration += 1

    return allocation


# --- Helper Functions for Simplex Algorithm ---
def find_basic_variables(allocation):
    """Find positions of basic variables (non-zero allocations)"""
    rows, cols = allocation.shape
    return [(i, j) for i, j in product(range(rows), range(cols)) if allocation[i, j] > 0]


def compute_dual_variables(costs, basic_vars):
    """Compute dual variables u and v using basic variables"""
    rows = max(i for i, _ in basic_vars) + 1
    cols = max(j for _, j in basic_vars) + 1

    u = [None] * rows
    v = [None] * cols
    u[0] = 0  # Set first u to 0 as reference

    while any(x is None for x in u + v):
        found_new = False
        for i, j in basic_vars:
            if u[i] is not None and v[j] is None:
                v[j] = costs[i, j] - u[i]
                found_new = True
            elif u[i] is None and v[j] is not None:
                u[i] = costs[i, j] - v[j]
                found_new = True
        if not found_new:
            break

    u = [0 if x is None else x for x in u]
    v = [0 if x is None else x for x in v]

    return u, v


def compute_reduced_costs(costs, u, v):
    """Compute reduced costs for all variables"""
    rows, cols = costs.shape
    reduced_costs = np.zeros((rows, cols))

    for i, j in product(range(rows), range(cols)):
        reduced_costs[i, j] = costs[i, j] - u[i] - v[j]

    return reduced_costs


def find_entering_variable(reduced_costs, basic_vars):
    """Find the entering variable with the most negative reduced cost"""
    min_cost = 0
    entering = None

    rows, cols = reduced_costs.shape
    for i, j in product(range(rows), range(cols)):
        if (i, j) not in basic_vars and reduced_costs[i, j] < min_cost:
            min_cost = reduced_costs[i, j]
            entering = (i, j)

    return entering


def find_cycle(entering, basic_vars, rows, cols):
    """Find a cycle starting from the entering variable"""
    def build_cycle(start, current, visited, direction, cycle):
        if len(cycle) > 1 and current == start:
            return cycle

        next_points = find_next_in_cycle(current, visited, direction)
        for next_point in next_points:
            new_direction = 'vertical' if direction == 'horizontal' else 'horizontal'
            new_cycle = build_cycle(start, next_point, visited + [current], new_direction, cycle + [current])
            if new_cycle:
                return new_cycle
        return None

    def find_next_in_cycle(current, visited, direction):
        i, j = current
        candidates = []

        if direction == 'horizontal':
            for row in range(rows):
                if row != i and (row, j) in basic_vars and (row, j) not in visited:
                    candidates.append((row, j))
        else:  # vertical
            for col in range(cols):
                if col != j and (i, col) in basic_vars and (i, col) not in visited:
                    candidates.append((i, col))

        return candidates

    cycle = build_cycle(entering, entering, [], 'horizontal', [])
    if not cycle:
        cycle = build_cycle(entering, entering, [], 'vertical', [])

    return cycle + [entering] if cycle else None


def update_allocation(allocation, cycle):
    """Update the allocation matrix based on the cycle"""
    theta = min(allocation[cycle[i]] for i in range(1, len(cycle), 2))  # Check odd-indexed positions (minus positions)

    for i in range(len(cycle)):
        pos = cycle[i]
        if i % 2 == 0:  # Plus position
            allocation[pos] += theta
        else:  # Minus position
            allocation[pos] -= theta

    return allocation


# --- Main Function ---
def main():
    # Test with the provided data
    file_path = r"C:\Users\matth\OneDrive - Universitat de Vic\transportation.xlsx"
    costs, supply, demand = read_excel(file_path)

    print("Costs Matrix:")
    print(costs)
    print("Supply Vector:")
    print(supply)
    print("Demand Vector:")
    print(demand)

    print("\nNorthwest Corner Method:")
    nw_allocation = northwest_corner(costs, supply.copy(), demand.copy())
    print(nw_allocation)

    print("\nMinimum Cost Method:")
    min_cost_allocation = minimum_cost_method(costs, supply.copy(), demand.copy())
    print(min_cost_allocation)

    print("\nVogel's Approximation Method:")
    vogels_allocation = vogels_method(costs, supply.copy(), demand.copy())
    print(vogels_allocation)

    print("\nTransportation Simplex Algorithm:")
    final_allocation = transportation_simplex(costs, vogels_allocation)
    print(final_allocation)

# Run the main function
main()
